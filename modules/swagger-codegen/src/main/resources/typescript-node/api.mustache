{{>licenseInfo}}
import fetch, { Headers } from 'cross-fetch';
{{^supportsES6}}
import Promise from 'bluebird';
{{/supportsES6}}

let defaultBasePath = '{{basePath}}';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

/* tslint:disable:no-unused-variable */

{{#models}}
{{#model}}
{{#description}}
/**
* {{{description}}}
*/
{{/description}}
{{^isEnum}}
export class {{classname}} {{#parent}}extends {{{parent}}} {{/parent}}{
{{#vars}}
{{#description}}
    /**
    * {{{description}}}
    */
{{/description}}
    '{{name}}': {{#isEnum}}{{{datatypeWithEnum}}}{{/isEnum}}{{^isEnum}}{{{datatype}}}{{/isEnum}};
{{/vars}}
}
{{/isEnum}}
{{#isEnum}}
export type {{classname}} =
{{#allowableValues}}
{{#values}}
    '{{.}}' {{^-last}}|{{/-last}}
{{/values}}
{{/allowableValues}};
{{/isEnum}}

{{#hasEnums}}
export namespace {{classname}} {
{{#vars}}
{{#isEnum}}
    export enum {{enumName}} {
        {{#allowableValues}}
        {{#enumVars}}
        {{name}} = <any> {{{value}}}{{^-last}},{{/-last}}
        {{/enumVars}}
        {{/allowableValues}}
    }
{{/isEnum}}
{{/vars}}
}
{{/hasEnums}}
{{/model}}
{{/models}}

interface GenericRecord {
    [key: string]: any;
}

export interface RequestOptions extends RequestInit {
    qs?: GenericRecord;
    json?: boolean;
    body?: any;
    uri?: string;
    formData?: { [key: string]: any };
    form?: { [key: string]: any } | string;
    encoding?: null | string;
}

export function setRequestOptionsHeader(
    requestOptions: RequestOptions,
    headerName: string,
    headerValue: string
) {
    if(headerValue === null || typeof headerValue === 'undefined') {
        return;
    }
    if (!requestOptions?.headers) {
        requestOptions.headers = new Headers();
    }
    if (requestOptions.headers instanceof Headers) {
        requestOptions.headers.set(headerName, headerValue);
    } else {
        (requestOptions.headers as any)[headerName] = headerValue;
    }
}

export const isPlainObj = (value: any) =>
    !!value && Object.getPrototypeOf(value) === Object.prototype;

export const isTextMimeType = (contentType: string) =>
    /text\/.*/i.test(contentType) || /[\/|\+]xml.*/i.test(contentType);

export const isNotEmpty = (val: any) => val !== null && val !== undefined;

export async function fetchWithRequestOptions(
    requestOptions: RequestOptions
): Promise<{ response: Response; body: any }> {
    const {
        uri,
        qs,
        json,
        encoding,
        form,
        formData,
        ...fetchOptions
    } = requestOptions;

    const url = new URL(uri);

    if (qs && Object.keys(qs).length > 0) {
        for (const key in qs) {
            const value = qs[key];
            url.searchParams.delete(key);
            if (!isNotEmpty(value)) {
                url.searchParams.append(key, '');
                continue;
            }
            if (Array.isArray(value)) {
                value.forEach((v) => url.searchParams.append(key, v));
            } else {
                url.searchParams.append(key, value);
            }
        }
    }

    if (fetchOptions?.body) {
        const body = fetchOptions.body;
        const requireJsonStringify = isPlainObj(body) || Array.isArray(body);
        if (json || requireJsonStringify) {
            setRequestOptionsHeader(
                fetchOptions,
                'Content-Type',
                'application/json'
            );
        }

        if (requireJsonStringify) {
            fetchOptions.body = JSON.stringify(body);
        } else {
            fetchOptions.body = body;
        }
    }

    if (form && formData) {
        throw new Error(
            'Only one of form or formData can be set for request options'
        );
    }

    if (fetchOptions?.body && (form || formData)) {
        throw new Error(
            'Only one of body or form or formData can be set for request options'
        );
    }

    if (form) {
        setRequestOptionsHeader(
            fetchOptions,
            'Content-Type',
            'application/x-www-form-urlencoded'
        );
        if (typeof form === 'string') {
            fetchOptions.body = form;
        } else {
            const params = new URLSearchParams();
            for (const key in form) {
                params.append(key, form[key]);
            }
            fetchOptions.body = params;
        }
    }

    if (formData) {
        const form = new FormData();
        for (const key in formData) {
            form.append(key, formData[key]);
        }
        fetchOptions.body = form;
    }

    const res = await fetch(url, fetchOptions);
    let contentType = res.headers.get('Content-Type');
    contentType = contentType ? contentType : '';

    let body: any;
    if (encoding === null) {
        body = await res.blob();
    } else if (contentType === 'application/json') {
        body = await res.json();
    } else if (isTextMimeType(contentType)) {
        body = await res.text();
    } else {
        if (typeof encoding === 'string' && encoding) {
            const buffer = await res.arrayBuffer();
            const decoder = new TextDecoder(encoding);
            body = decoder.decode(buffer);
        } else {
            body = await res.text();
        }
    }
    if (res.ok) {
        return { response: res, body };
    } else {
        throw { response: res, body };
    }
}

export interface Authentication {
    /**
     * Apply authentication settings to header and query params.
     */
    applyToRequest(fetchOptions: RequestOptions): void;
}

export class HttpBasicAuth implements Authentication {
    public username: string;
    public password: string;
    applyToRequest(requestOptions: RequestOptions): void {
        const basicAuthValue = Buffer.from(
            this.username + ':' + this.password,
            'utf-8'
        ).toString('base64');
        setRequestOptionsHeader(
            requestOptions,
            'Authorization',
            'Basic ' + basicAuthValue
        );
    }
}

export class ApiKeyAuth implements Authentication {
    public apiKey: string;

    constructor(private location: string, private paramName: string) {}

    applyToRequest(requestOptions: RequestOptions): void {
        if (this.location == 'query') {
            if (!requestOptions.qs) {
                requestOptions.qs = {};
            }
            requestOptions.qs[this.paramName] = this.apiKey;
        } else if (this.location == 'header') {
            setRequestOptionsHeader(
                requestOptions,
                this.paramName,
                this.apiKey
            );
        }
    }
}

export class OAuth implements Authentication {
    public accessToken: string;

    applyToRequest(requestOptions: RequestOptions): void {
        setRequestOptionsHeader(
            requestOptions,
            'Authorization',
            'Bearer ' + this.accessToken
        );
    }
}

export class VoidAuth implements Authentication {
    public username: string;
    public password: string;
    applyToRequest(_: RequestOptions): void {
        // Do nothing
    }
}

{{#apiInfo}}
{{#apis}}
{{#operations}}
{{#description}}
/**
* {{&description}}
*/
{{/description}}
export enum {{classname}}ApiKeys {
{{#authMethods}}
{{#isApiKey}}
    {{name}},
{{/isApiKey}}
{{/authMethods}}
}

export class {{classname}} {
    protected basePath = defaultBasePath;
    protected defaultHeaders : any = {};

    protected authentications: any = {
        'default': <Authentication>new VoidAuth(),
{{#authMethods}}
{{#isBasic}}
        '{{name}}': new HttpBasicAuth(),
{{/isBasic}}
{{#isApiKey}}
        '{{name}}': new ApiKeyAuth({{#isKeyInHeader}}'header'{{/isKeyInHeader}}{{^isKeyInHeader}}'query'{{/isKeyInHeader}}, '{{keyParamName}}'),
{{/isApiKey}}
{{#isOAuth}}
        '{{name}}': new OAuth(),
{{/isOAuth}}
{{/authMethods}}
    }

    constructor(basePath?: string);
{{#authMethods}}
{{#isBasic}}
    constructor(username: string, password: string, basePath?: string);
{{/isBasic}}
{{/authMethods}}
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
{{#authMethods}}
{{#isBasic}}
            this.username = basePathOrUsername;
            this.password = password
{{/isBasic}}
{{/authMethods}}
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    public setApiKey(key: {{classname}}ApiKeys, value: string) {
        this.authentications[{{classname}}ApiKeys[key]].apiKey = value;
    }
{{#authMethods}}
{{#isBasic}}
    set username(username: string) {
        this.authentications.{{name}}.username = username;
    }

    set password(password: string) {
        this.authentications.{{name}}.password = password;
    }
{{/isBasic}}
{{#isOAuth}}

    set accessToken(token: string) {
        this.authentications.{{name}}.accessToken = token;
    }
{{/isOAuth}}
{{/authMethods}}
{{#operation}}
    /**
     * {{summary}}
     * {{notes}}
     {{#allParams}}* @param {{paramName}} {{description}}
     {{/allParams}}*/
    public {{nickname}} ({{#allParams}}{{paramName}}{{^required}}?{{/required}}: {{{dataType}}}{{#hasMore}}, {{/hasMore}}{{/allParams}}) : Promise<{ response: Response; {{#returnType}}body: {{{returnType}}}; {{/returnType}}{{^returnType}}body?: any; {{/returnType}} }> {
        const localVarPath = this.basePath + '{{path}}'{{#pathParams}}
            .replace('{' + '{{baseName}}' + '}', String({{paramName}})){{/pathParams}};
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};

{{#allParams}}{{#required}}
        // verify required parameter '{{paramName}}' is not null or undefined
        if ({{paramName}} === null || {{paramName}} === undefined) {
            throw new Error('Required parameter {{paramName}} was null or undefined when calling {{nickname}}.');
        }
{{/required}}{{/allParams}}
{{#queryParams}}
        if ({{paramName}} !== undefined) {
            queryParameters['{{baseName}}'] = {{paramName}};
        }

{{/queryParams}}
{{#headerParams}}
        if (isNotEmpty({{paramName}})) {
            headerParams['{{baseName}}'] = {{paramName}};
        }

{{/headerParams}}
        let useFormData = false;

{{#formParams}}
        if ({{paramName}} !== undefined) {
            formParams['{{baseName}}'] = {{paramName}};
        }
{{#isFile}}
        useFormData = true;
{{/isFile}}

{{/formParams}}

        const requestOptions: RequestOptions = {
            method: '{{httpMethod}}',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
{{^isResponseFile}}
            json: true,
{{/isResponseFile}}
{{#isResponseFile}}
            encoding: null,
{{/isResponseFile}}
{{#bodyParam}}
            body: {{paramName}},
{{/bodyParam}}
        };

{{#authMethods}}
        this.authentications.{{name}}.applyToRequest(requestOptions);

{{/authMethods}}
        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        return fetchWithRequestOptions(requestOptions);
    }
{{/operation}}
}
{{/operations}}
{{/apis}}
{{/apiInfo}}
